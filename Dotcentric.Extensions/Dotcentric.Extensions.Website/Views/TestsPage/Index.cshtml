@model PageViewModel<TestsPage>

@{
    Layout = "~/Views/Shared/Layouts/_TwoPlusOne.cshtml";
    var testValues = ViewBag.TestsObjects as TestsViewModel;
}

<h1 @Html.EditAttributes(x => x.CurrentPage.PageName)>@Model.CurrentPage.PageName</h1>
<p class="introduction" @Html.EditAttributes(x => x.CurrentPage.MetaDescription)>@Model.CurrentPage.MetaDescription</p>
<div class="row">
    <div class="span8 clearfix">
        <div>
            <p>Retrieving the start page from the <a href="@GetUrl(Model.CurrentPage)">current page</a> : @GetLink(testValues.TestAncestorStartPage)</p>
            <p>Retrieving the current page when calling GetAncestorOrSelf : @GetLink(testValues.TestAncestorOrSelf)</p>
            <p>Testing the 'GetAncestor' function with StartPage as predicate type: @GetLink(testValues.TestAncestor)</p>
            <p>Let's find the first descendent with the name = 'Find a reseller':  @GetLink(testValues.TestDescendentWithPredicate)</p>
            <p>Let's find all the ancestors of the 'Find a reseller' page : @GetLinks(testValues.TestAncestors)</p>
            <p>Let's find all the standard page ancestors of the 'Find a reseller' page : @GetLinks(testValues.TestAncestorsPredicateType)</p>
            <p>Let's find all the ancestors with more than 2 children : @GetLinks(testValues.TestAncestorsPredicateNumChildren)</p>
            <p>Let's find the first product descendant of start page: @GetLink(testValues.TestStartDescendentProductPage)</p>
            <p>Let's find the first descendant of start page that is a standard page and starts with 'White' : @GetLink(testValues.TestDescendentMultiPredicate)</p>
            <p>Let's find all the product descendents of start page : @GetLinks(testValues.TestDescendentsPredicateType)</p>
            <p>Let's find all the siblings of the current page : @GetLinks(testValues.TestSiblingsCurrentPage)</p>
            <p>Let's find all the product siblings of the current page : @GetLinks(testValues.TestTypedSiblingsCurrentPage)</p>
            <p>find the next sibling by name of the page named 'alloy plan' : @GetLink(testValues.TestNextSiblingByName) </p>
            <p>Let's find the previous sibling by 'sort order' property: @GetLink(testValues.TestPreviousSiblingBySortOrder) </p>
        </div>
    </div>
</div>

@helper GetUrl(EPiServer.Core.IContent content)
{
    @Url.ContentUrl(content.ContentLink)
}

@helper GetLink(EPiServer.Core.IContent content)
{
    <span> | </span> <a href="@GetUrl(content)">@content.Name</a> <span> | </span>
}

@helper GetLinks(IEnumerable<EPiServer.Core.IContent> contentList)
{
    <span> | </span>
    foreach (var content in contentList)
    {
        <a href="@GetUrl(content)">@content.Name</a> <span> | </span>
    }
}